@using System.Diagnostics.CodeAnalysis
@using Yafers.Web.Services.Business.Interfaces

@inject ISchoolService SchoolService

@inherits InputBase<int?>

<div class="school-select">
    <select class="form-select" @bind="SelectedId" required="@Required">
        <option value="0">-- select school --</option>
        @foreach (var s in Items)
        {
            <option value="@s.Id">@s.Name@if(!string.IsNullOrEmpty(s.City)){
            <text> (@s.City)</text>
        }
</option>
                }
    </select>
</div>

@code {
    [Parameter]
    public string Placeholder { get; set; } = "Select school";
    [Parameter] public bool Required { get; set; }

    private List<SchoolItem> Items { get; set; } = new();

    private int? SelectedId
    {
        get => Value;
        set
        {
            if (Value != value)
            {
                Value = value;
                _ = ValueChanged.InvokeAsync(value);
            }
        }
    }

    private bool _loaded;

    protected override async Task OnInitializedAsync()
    {
        if (_loaded) return; 
        _loaded = true;
        try
        {
            var list = await SchoolService.SearchAsync(null);
            Items = list?.Select(x => new SchoolItem
            {
                Id = x.Id,
                Name = x.Name,
                City = x.City,
                Country = x.Country
            }).ToList() ?? new();
        }
        catch
        {
            Items = new();
        }

        // If an external Value is set but not present in Items, try to load it
        if (Value != 0 && !Items.Any(i => i.Id == Value))
        {
            try
            {
                var s = await SchoolService.GetByIdAsync(Value);
                if (s != null)
                {
                    Items.Insert(0, new SchoolItem { Id = s.Id, Name = s.Name, City = s.City, Country = s.Country });
                }
            }
            catch { /* ignore */ }
        }
    }

    private sealed class SchoolItem
    {
        public int? Id { get; set; }
        public string Name { get; set; } = "";
        public string? City { get; set; }
        public string? Country { get; set; }
    }

    protected override bool TryParseValueFromString(string? value, out int? result, [NotNullWhen(false)] out string? validationErrorMessage)
    {
        if (string.IsNullOrEmpty(value))
        {
            result = null;
            validationErrorMessage = null;
            return true;
        }

        if (int.TryParse(value, out var v))
        {
            result = v;
            validationErrorMessage = null;
            return true;
        }

        result = null;
        validationErrorMessage = "The selected value is not valid.";
        return false;
    }

}